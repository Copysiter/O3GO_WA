"""
Модуль core.logger: Конфигурация логирования для FastAPI-приложения.
"""
from atol_logging import Config, Event, RequestIdFilter, setup_logger

from .settings import settings


SERVICE_INFO = {
    'name': settings.PROJECT_NAME,
    'version': settings.PROJECT_VERSION,
    'env': settings.PROJECT_ENVIRONMENT,
    'instance_id': settings.PROJECT_INSTANCE_ID
}

EVENT_MAP: Config = {
    'SYSTEM': (1, {
        'APP': (1, {
            'STARTUP': (1, 'Запуск приложения'),
            'SHUTDOWN': (2, 'Остановка приложения'),
            'SUCCESS': (3, 'Приложение успешно запущено'),
            'FAILURE': (4, 'Не удалось запустить приложение'),
            'ERROR': (5, 'Ошибка запуска приложения'),
        }),
        'CONFIG': (2, {
            'LOAD': (1, 'Загрузка конфигурации'),
            'CHECK': (2, 'Проверка конфигурации'),
            'SUCCESS': (3, 'Конфигурация успешно загружена'),
            'FAILURE': (4, 'Конфигурация не соответствует требованиям'),
            'ERROR': (5, 'Ошибка при загрузке конфигурации'),
        }),
        'API': (3, {
            'REQUEST': (1, 'Получен входящий запрос'),
            'RESPONSE': (2, 'Успешный ответ (HTTP 2xx)'),
            'UNAUTHORIZED': (3, 'Пользователь не авторизован (HTTP 401)'),
            'FORBIDDEN': (4, 'Доступ запрещён (HTTP 403)'),
            'NOT_FOUND': (5, 'Ресурс не найден (HTTP 404)'),
            'FAILURE': (6, 'Негативный ответ (HTTP 4xx)'),
            'ERROR': (7, 'Ошибка при обработке запроса (HTTP 5xx)'),
        }),
    }),
    'AUTH': (2, {
        'LOGIN': (1, {
            'SUCCESS': (1, 'Успешная аутентификация'),
            'INVALID_TOKEN': (2, 'Невалидный токен'),
            'TOKEN_EXPIRED': (3, 'Срок действия токена истек'),
            'FAILURE': (4, 'Аутентификация не пройдена'),
            'ERROR': (5, 'Ошибка аутентификации'),
        }),
        'ACCESS': (2, {
            'ALLOWED': (1, 'Доступ разрешён'),
            'DENIED': (2, 'Недостаточно прав'),
            'FAILURE': (3, 'Авторизации не пройдена'),
            'ERROR': (4, 'Ошибка авторизации'),
        }),
    }),
    'DB': (3, {
        'CONNECTION': (1, {
            'INIT': (1, 'Подключение к БД'),
            'SUCCESS': (2, 'Подключение к БД успешно установлено'),
            'FAILURE': (3, 'Подключение к БД не установлено'),
            'ERROR': (4, 'Ошибка при подключении к БД'),
        }),
        'QUERY': (2, {
            'EXECUTE': (1, 'Выполнение запроса'),
            'SUCCESS': (2, 'Запрос выполнен успешно'),
            'FAILURE': (3, 'Неуспешное завершение запроса'),
            'TIMEOUT': (4, 'Запрос превысил лимит ожидания ответа'),
            'ERROR': (5, 'Ошибка при выполнении запроса'),
        }),
        'TRANSACTION': (3, {
            'BEGIN': (1, 'Начало транзакции'),
            'COMMIT': (2, 'Фиксация транзакции'),
            'ROLLBACK': (3, 'Откат транзакции'),
            'ERROR': (4, 'Сбой транзакции'),
        }),
    }),
    'EXTERNAL': (4, {
        'SERVICE': (1, {
            'REQUEST': (1, 'Запрос к внешнему сервису'),
            'RESPONSE': (2, 'Успешный ответ от внешнего сервиса'),
            'FAILURE': (3, 'Неуспешный ответ от внешнего сервиса'),
            'ERROR': (4, 'Ошибка при запросе к внешнему сервису'),
        }),
    }),
    'SCHEDULER': (5, {
        'SERVICE': (1, {
            'STARTUP': (1, 'Запуск планировщика'),
            'SUCCESS': (2, 'Планировщик запущен'),
            'SHUTDOWN': (3, 'Остановка планировщика'),
            'FAILURE': (4, 'Не удалось запустить планировщик'),
            'ERROR': (5, 'Ошибка запуска планировщика'),
        }),
        'JOB': (2, {
            'START': (1, 'Запуск фоновой задачи'),
            'SUCCESS': (2, 'Фоновая задача завершена успешно'),
            'FAILURE': (3, 'Задача завершилась с ошибкой'),
            'ERROR': (4, 'Ошибка при запуске фоновой задачи'),
        }),
    }),
    'MQTT': (6, {
        'CONNECTION': (1, {
            'INIT': (1, 'Подключение к брокеру'),
            'SUCCESS': (2, 'Подключение к брокеру установлено'),
            'FAILURE': (3, 'Не удалось установить соединение с брокером'),
            'ERROR': (4, 'Ошибка при подключении к MQTT-брокеру'),
            'CLOSE': (5, 'Закрытие соединения с MQTT-брокером'),
        }),
        'TOPIC': (2, {
            'SUBSCRIBE': (1, 'Подписка на MQTT-топик'),
            'UNSUBSCRIBE': (2, 'Отписка от MQTT-топика'),
            'SUCCESS': (3, 'Подписка на MQTT-топик выполнена успешно'),
            'FAILURE': (4, 'Подписка на MQTT-топик не выполнена'),
            'ERROR': (5, 'Ошибка при работе с MQTT-топиком'),
        }),
        'MESSAGE': (3, {
            'PUBLISH': (1, 'Публикация MQTT-сообщения'),
            'RECEIVE': (2, 'Чтение MQTT-сообщения'),
            'PROCESSING': (3, 'Обработка MQTT-сообщения'),
            'SUCCESS': (4, 'MQTT-сообщение успешно обработано'),
            'FAILURE': (5, 'Не удалось опубликовать/получить MQTT-сообщение'),
            'ERROR': (6, 'Ошибка при обработке MQTT-сообщения'),
        }),
    }),
    'KAFKA': (7, {
        'CONNECTION': (1, {
            'INIT': (1, 'Подключение к брокеру'),
            'SUCCESS': (2, 'Подключение к брокеру установлено'),
            'FAILURE': (3, 'Не удалось установить соединение с брокером'),
            'ERROR': (4, 'Ошибка при подключении к Kafka-брокеру'),
            'CLOSE': (5, 'Закрытие соединения с Kafka-брокером'),
        }),
        'CONSUMER': (2, {
            'START': (1, 'Запуск консюмера'),
            'STOP': (2, 'Остановка консюмера'),
            'ASSIGN': (3, 'Назначение набора партиций консюмеру'),
            'SUCCESS': (4, 'Успешный запуск консюмера'),
            'FAILURE': (5, 'Неуспешный запуск консюмера'),
            'ERROR': (6, 'Ошибка в работе консюмера'),
        }),
        'TOPIC': (3, {
            'SUBSCRIBE': (1, 'Подписка на топик'),
            'UNSUBSCRIBE': (2, 'Отписка от топика'),
            'FAILURE': (3, 'Не удалось подписаться на топик'),
            'ERROR': (4, 'Ошибка при работе с топиком'),
        }),
        'MESSAGE': (4, {
            'SEND': (1, 'Отправка сообщения'),
            'RECEIVE': (2, 'Чтение сообщения'),
            'PROCESSING': (3, 'Обработка сообщения'),
            'SUCCESS': (4, 'Сообщение успешно обработано'),
            'FAILURE': (5, 'Не удалось отправить/получить сообщение'),
            'ERROR': (6, 'Ошибка при обработке сообщения'),
        }),
        'COMMIT': (5, {
            'SEND': (1, 'Коммит оффсета'),
            'SUCCESS': (2, 'Коммит оффсета успешно выполнен'),
            'FAILURE': (3, 'Коммит оффсета не выполнен'),
            'ERROR': (4, 'Ошибка при коммите оффсета'),
        }),
        'SEEK': (6, {
            'SET': (1, 'Изменение позиции чтения'),
            'SUCCESS': (2, 'Позиция чтения успешно изменена'),
            'FAILURE': (3, 'Неуспешное изменение позиции чтения'),
            'ERROR': (4, 'Ошибка при изменении позиции чтения'),
        }),
    }),
    'RECEIPT': (8, {
        'SAVE': (1, {
            'REQUEST': (1, 'Получен запрос на сохранение чека'),
            'ATTEMPT': (2, 'Сохранение чека'),
            'SUCCESS': (3, 'Чек успешно сохранёна'),
            'FAILURE': (4, 'Чек не сохранёна'),
            'ERROR': (5, 'Ошибка сохранения чека'),
        }),
        'READ': (2, {
            'REQUEST': (1, 'Получен запрос на чтение информации о чеке'),
            'ATTEMPT': (2, 'Получение информации о чеке'),
            'SUCCESS': (3, 'Информация о чеке успешно получена'),
            'FAILURE': (4, 'Не удалось получить информацию о чеке'),
            'ERROR': (5, 'Ошибка при получении информации о чеке'),
        }),
        'STATS': (3, {
            'REQUEST': (1, 'Получен запрос на получение статистики по чекам'),
            'ATTEMPT': (2, 'Получение статистики по чекам'),
            'SUCCESS': (3, 'Статистика по чекам успешно получена'),
            'FAILURE': (4, 'Не удалось получить статистику по чекам'),
            'ERROR': (5, 'Ошибка при получении статистики по чекам'),
        }),
        'CHECK': (4, {
            'ATTEMPT': (1, 'Проверка чека'),
            'SUCCESS': (2, 'Проверка чека завершена успешно'),
            'FAILURE': (3, 'Чек не соответствует требованиям'),
            'ERROR': (4, 'Ошибка при проверке чека'),
            'EXISTS': (5, 'Существует'),
            'NOT_FOUND': (6, 'Не найден'),
        }),
        'STATUS': (5, {
            'RECEIVED': (1, 'Чек получен сервером'),
            'ACCEPTED': (2, 'Чек принят и обработан'),
            'REJECT': (3, 'Чек отклонён'),
            'IGNORED': (4, 'Чек проигнорирован'),
            'DUPLICATE': (5, 'Дублирующий чек'),
            'FAILED': (6, 'Ошибка при обработке чека'),
        }),
    }),
}

logger = setup_logger(
    name=settings.LOG_NAME,
    level=settings.LOG_LEVEL,
    log_path=settings.LOG_PATH,
    rotation_type=settings.LOG_ROTATION_TYPE,
    rotation_max_bytes=int(settings.LOG_ROTATION_MAX_BYTES),
    rotation_when=settings.LOG_ROTATION_WHEN,
    rotation_interval=int(settings.LOG_ROTATION_INTERVAL),
    backup_count=int(settings.LOG_BACKUP_COUNT),
    stdout=settings.LOG_STDOUT,
    enabled_loggers=settings.LOG_ENABLED_LOGGERS,
    service=SERVICE_INFO
)

logger.addFilter(RequestIdFilter())

E = Event(EVENT_MAP)
